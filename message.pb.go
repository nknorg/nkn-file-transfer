// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MSG_REQUEST_TO_SEND_FILE MessageType = 0
	MSG_ACCEPT_FILE          MessageType = 1
	MSG_REJECT_FILE          MessageType = 2
	MSG_FILE_CHUNK           MessageType = 3
	MSG_FILE_CHUNK_ACK       MessageType = 4
)

var MessageType_name = map[int32]string{
	0: "MSG_REQUEST_TO_SEND_FILE",
	1: "MSG_ACCEPT_FILE",
	2: "MSG_REJECT_FILE",
	3: "MSG_FILE_CHUNK",
	4: "MSG_FILE_CHUNK_ACK",
}
var MessageType_value = map[string]int32{
	"MSG_REQUEST_TO_SEND_FILE": 0,
	"MSG_ACCEPT_FILE":          1,
	"MSG_REJECT_FILE":          2,
	"MSG_FILE_CHUNK":           3,
	"MSG_FILE_CHUNK_ACK":       4,
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{0}
}

type Message struct {
	Type MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=main.MessageType" json:"type,omitempty"`
	Body []byte      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MSG_REQUEST_TO_SEND_FILE
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type RequestToSendFile struct {
	RequestId uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FileName  string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize  int64  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
}

func (m *RequestToSendFile) Reset()      { *m = RequestToSendFile{} }
func (*RequestToSendFile) ProtoMessage() {}
func (*RequestToSendFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{1}
}
func (m *RequestToSendFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestToSendFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestToSendFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestToSendFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestToSendFile.Merge(dst, src)
}
func (m *RequestToSendFile) XXX_Size() int {
	return m.Size()
}
func (m *RequestToSendFile) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestToSendFile.DiscardUnknown(m)
}

var xxx_messageInfo_RequestToSendFile proto.InternalMessageInfo

func (m *RequestToSendFile) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RequestToSendFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *RequestToSendFile) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type AcceptFile struct {
	RequestId     uint32   `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FileId        uint32   `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkSize     uint32   `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	ChunksBufSize uint32   `protobuf:"varint,4,opt,name=chunks_buf_size,json=chunksBufSize,proto3" json:"chunks_buf_size,omitempty"`
	Clients       []uint32 `protobuf:"varint,5,rep,packed,name=clients" json:"clients,omitempty"`
}

func (m *AcceptFile) Reset()      { *m = AcceptFile{} }
func (*AcceptFile) ProtoMessage() {}
func (*AcceptFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{2}
}
func (m *AcceptFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AcceptFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptFile.Merge(dst, src)
}
func (m *AcceptFile) XXX_Size() int {
	return m.Size()
}
func (m *AcceptFile) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptFile.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptFile proto.InternalMessageInfo

func (m *AcceptFile) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *AcceptFile) GetFileId() uint32 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *AcceptFile) GetChunkSize() uint32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *AcceptFile) GetChunksBufSize() uint32 {
	if m != nil {
		return m.ChunksBufSize
	}
	return 0
}

func (m *AcceptFile) GetClients() []uint32 {
	if m != nil {
		return m.Clients
	}
	return nil
}

type RejectFile struct {
	RequestId uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *RejectFile) Reset()      { *m = RejectFile{} }
func (*RejectFile) ProtoMessage() {}
func (*RejectFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{3}
}
func (m *RejectFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RejectFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectFile.Merge(dst, src)
}
func (m *RejectFile) XXX_Size() int {
	return m.Size()
}
func (m *RejectFile) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectFile.DiscardUnknown(m)
}

var xxx_messageInfo_RejectFile proto.InternalMessageInfo

func (m *RejectFile) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type FileChunk struct {
	FileId  uint32 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkId uint32 `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FileChunk) Reset()      { *m = FileChunk{} }
func (*FileChunk) ProtoMessage() {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{4}
}
func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(dst, src)
}
func (m *FileChunk) XXX_Size() int {
	return m.Size()
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetFileId() uint32 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *FileChunk) GetChunkId() uint32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *FileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileChunkAck struct {
	FileId  uint32 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkId uint32 `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (m *FileChunkAck) Reset()      { *m = FileChunkAck{} }
func (*FileChunkAck) ProtoMessage() {}
func (*FileChunkAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_388292732507f9a6, []int{5}
}
func (m *FileChunkAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChunkAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChunkAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileChunkAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunkAck.Merge(dst, src)
}
func (m *FileChunkAck) XXX_Size() int {
	return m.Size()
}
func (m *FileChunkAck) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunkAck.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunkAck proto.InternalMessageInfo

func (m *FileChunkAck) GetFileId() uint32 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *FileChunkAck) GetChunkId() uint32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "main.Message")
	proto.RegisterType((*RequestToSendFile)(nil), "main.RequestToSendFile")
	proto.RegisterType((*AcceptFile)(nil), "main.AcceptFile")
	proto.RegisterType((*RejectFile)(nil), "main.RejectFile")
	proto.RegisterType((*FileChunk)(nil), "main.FileChunk")
	proto.RegisterType((*FileChunkAck)(nil), "main.FileChunkAck")
	proto.RegisterEnum("main.MessageType", MessageType_name, MessageType_value)
}
func (x MessageType) String() string {
	s, ok := MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *RequestToSendFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestToSendFile)
	if !ok {
		that2, ok := that.(RequestToSendFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.FileName != that1.FileName {
		return false
	}
	if this.FileSize != that1.FileSize {
		return false
	}
	return true
}
func (this *AcceptFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcceptFile)
	if !ok {
		that2, ok := that.(AcceptFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.FileId != that1.FileId {
		return false
	}
	if this.ChunkSize != that1.ChunkSize {
		return false
	}
	if this.ChunksBufSize != that1.ChunksBufSize {
		return false
	}
	if len(this.Clients) != len(that1.Clients) {
		return false
	}
	for i := range this.Clients {
		if this.Clients[i] != that1.Clients[i] {
			return false
		}
	}
	return true
}
func (this *RejectFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RejectFile)
	if !ok {
		that2, ok := that.(RejectFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *FileChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileChunk)
	if !ok {
		that2, ok := that.(FileChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileId != that1.FileId {
		return false
	}
	if this.ChunkId != that1.ChunkId {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *FileChunkAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileChunkAck)
	if !ok {
		that2, ok := that.(FileChunkAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileId != that1.FileId {
		return false
	}
	if this.ChunkId != that1.ChunkId {
		return false
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.Message{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestToSendFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&main.RequestToSendFile{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "FileName: "+fmt.Sprintf("%#v", this.FileName)+",\n")
	s = append(s, "FileSize: "+fmt.Sprintf("%#v", this.FileSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AcceptFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&main.AcceptFile{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "ChunkSize: "+fmt.Sprintf("%#v", this.ChunkSize)+",\n")
	s = append(s, "ChunksBufSize: "+fmt.Sprintf("%#v", this.ChunksBufSize)+",\n")
	s = append(s, "Clients: "+fmt.Sprintf("%#v", this.Clients)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RejectFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&main.RejectFile{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&main.FileChunk{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "ChunkId: "+fmt.Sprintf("%#v", this.ChunkId)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileChunkAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.FileChunkAck{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "ChunkId: "+fmt.Sprintf("%#v", this.ChunkId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *RequestToSendFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestToSendFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.RequestId))
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.FileSize))
	}
	return i, nil
}

func (m *AcceptFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.RequestId))
	}
	if m.FileId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.FileId))
	}
	if m.ChunkSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ChunkSize))
	}
	if m.ChunksBufSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ChunksBufSize))
	}
	if len(m.Clients) > 0 {
		dAtA2 := make([]byte, len(m.Clients)*10)
		var j1 int
		for _, num := range m.Clients {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *RejectFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.RequestId))
	}
	return i, nil
}

func (m *FileChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FileId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.FileId))
	}
	if m.ChunkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ChunkId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *FileChunkAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChunkAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FileId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.FileId))
	}
	if m.ChunkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ChunkId))
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMessage(r randyMessage, easy bool) *Message {
	this := &Message{}
	this.Type = MessageType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v1 := r.Intn(100)
	this.Body = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Body[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestToSendFile(r randyMessage, easy bool) *RequestToSendFile {
	this := &RequestToSendFile{}
	this.RequestId = uint32(r.Uint32())
	this.FileName = string(randStringMessage(r))
	this.FileSize = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.FileSize *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAcceptFile(r randyMessage, easy bool) *AcceptFile {
	this := &AcceptFile{}
	this.RequestId = uint32(r.Uint32())
	this.FileId = uint32(r.Uint32())
	this.ChunkSize = uint32(r.Uint32())
	this.ChunksBufSize = uint32(r.Uint32())
	v2 := r.Intn(10)
	this.Clients = make([]uint32, v2)
	for i := 0; i < v2; i++ {
		this.Clients[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRejectFile(r randyMessage, easy bool) *RejectFile {
	this := &RejectFile{}
	this.RequestId = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFileChunk(r randyMessage, easy bool) *FileChunk {
	this := &FileChunk{}
	this.FileId = uint32(r.Uint32())
	this.ChunkId = uint32(r.Uint32())
	v3 := r.Intn(100)
	this.Data = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFileChunkAck(r randyMessage, easy bool) *FileChunkAck {
	this := &FileChunkAck{}
	this.FileId = uint32(r.Uint32())
	this.ChunkId = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessage(r randyMessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessage(r randyMessage) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedMessage(r randyMessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessage(dAtA []byte, r randyMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestToSendFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovMessage(uint64(m.RequestId))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovMessage(uint64(m.FileSize))
	}
	return n
}

func (m *AcceptFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovMessage(uint64(m.RequestId))
	}
	if m.FileId != 0 {
		n += 1 + sovMessage(uint64(m.FileId))
	}
	if m.ChunkSize != 0 {
		n += 1 + sovMessage(uint64(m.ChunkSize))
	}
	if m.ChunksBufSize != 0 {
		n += 1 + sovMessage(uint64(m.ChunksBufSize))
	}
	if len(m.Clients) > 0 {
		l = 0
		for _, e := range m.Clients {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	return n
}

func (m *RejectFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovMessage(uint64(m.RequestId))
	}
	return n
}

func (m *FileChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovMessage(uint64(m.FileId))
	}
	if m.ChunkId != 0 {
		n += 1 + sovMessage(uint64(m.ChunkId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FileChunkAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovMessage(uint64(m.FileId))
	}
	if m.ChunkId != 0 {
		n += 1 + sovMessage(uint64(m.ChunkId))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestToSendFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestToSendFile{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`FileName:` + fmt.Sprintf("%v", this.FileName) + `,`,
		`FileSize:` + fmt.Sprintf("%v", this.FileSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcceptFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcceptFile{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`FileId:` + fmt.Sprintf("%v", this.FileId) + `,`,
		`ChunkSize:` + fmt.Sprintf("%v", this.ChunkSize) + `,`,
		`ChunksBufSize:` + fmt.Sprintf("%v", this.ChunksBufSize) + `,`,
		`Clients:` + fmt.Sprintf("%v", this.Clients) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RejectFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RejectFile{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileChunk{`,
		`FileId:` + fmt.Sprintf("%v", this.FileId) + `,`,
		`ChunkId:` + fmt.Sprintf("%v", this.ChunkId) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileChunkAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileChunkAck{`,
		`FileId:` + fmt.Sprintf("%v", this.FileId) + `,`,
		`ChunkId:` + fmt.Sprintf("%v", this.ChunkId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestToSendFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestToSendFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestToSendFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunksBufSize", wireType)
			}
			m.ChunksBufSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunksBufSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Clients = append(m.Clients, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Clients = append(m.Clients, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileChunkAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChunkAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChunkAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptor_message_388292732507f9a6) }

var fileDescriptor_message_388292732507f9a6 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x3d, 0x8d, 0x69, 0xea, 0x4b, 0xdc, 0xa6, 0x83, 0x04, 0xe6, 0x6f, 0x14, 0x59, 0x02,
	0x45, 0x20, 0x52, 0x09, 0xb6, 0x6c, 0x12, 0xd7, 0x85, 0x50, 0x1a, 0x60, 0xec, 0xae, 0x2d, 0xff,
	0x4c, 0xd2, 0x81, 0xd8, 0x0e, 0xb5, 0xbd, 0x48, 0x57, 0xf0, 0x06, 0xbc, 0x04, 0x12, 0x8f, 0xc0,
	0x23, 0xb0, 0xcc, 0xb2, 0x4b, 0xe2, 0x6c, 0x58, 0x76, 0xc9, 0x12, 0xcd, 0x38, 0x0d, 0xed, 0xae,
	0xea, 0xee, 0x9e, 0xef, 0xdc, 0x39, 0xf7, 0x8e, 0x66, 0x40, 0x8f, 0x59, 0x96, 0xf9, 0x23, 0xd6,
	0x99, 0x1c, 0xa7, 0x79, 0x8a, 0xd5, 0xd8, 0xe7, 0xc9, 0xbd, 0x67, 0x23, 0x9e, 0x1f, 0x15, 0x41,
	0x27, 0x4c, 0xe3, 0x9d, 0x51, 0x3a, 0x4a, 0x77, 0xa4, 0x19, 0x14, 0x43, 0xa9, 0xa4, 0x90, 0x55,
	0x75, 0xc8, 0xdc, 0x85, 0xfa, 0x41, 0x95, 0x82, 0x1f, 0x81, 0x9a, 0x4f, 0x27, 0xcc, 0x40, 0x2d,
	0xd4, 0xde, 0x7c, 0xbe, 0xdd, 0x11, 0x71, 0x9d, 0xa5, 0xe9, 0x4e, 0x27, 0x8c, 0x4a, 0x1b, 0x63,
	0x50, 0x83, 0x34, 0x9a, 0x1a, 0x6b, 0x2d, 0xd4, 0x6e, 0x50, 0x59, 0x9b, 0x63, 0xd8, 0xa6, 0xec,
	0x73, 0xc1, 0xb2, 0xdc, 0x4d, 0x1d, 0x96, 0x44, 0x7b, 0x7c, 0xcc, 0xf0, 0x43, 0x80, 0xe3, 0x0a,
	0x7a, 0x3c, 0x92, 0xa9, 0x3a, 0xd5, 0x96, 0xa4, 0x1f, 0xe1, 0xfb, 0xa0, 0x0d, 0xf9, 0x98, 0x79,
	0x89, 0x1f, 0x33, 0x19, 0xa6, 0xd1, 0x0d, 0x01, 0x06, 0x7e, 0xcc, 0x56, 0x66, 0xc6, 0x4f, 0x98,
	0x51, 0x6b, 0xa1, 0x76, 0xad, 0x32, 0x1d, 0x7e, 0xc2, 0xcc, 0xef, 0x08, 0xa0, 0x1b, 0x86, 0x6c,
	0x92, 0x5f, 0x65, 0xce, 0x1d, 0xa8, 0xcb, 0x28, 0x1e, 0xc9, 0x29, 0x3a, 0x5d, 0x17, 0xb2, 0x1f,
	0x89, 0x73, 0xe1, 0x51, 0x91, 0x7c, 0xfa, 0x3f, 0x44, 0xa7, 0x9a, 0x24, 0x62, 0x0a, 0x7e, 0x0c,
	0x5b, 0x52, 0x64, 0x5e, 0x50, 0x0c, 0xab, 0x1e, 0x55, 0xf6, 0xe8, 0x15, 0xee, 0x15, 0x43, 0xd9,
	0x67, 0x40, 0x3d, 0x1c, 0x73, 0x96, 0xe4, 0x99, 0x71, 0xa3, 0x55, 0x6b, 0xeb, 0xf4, 0x5c, 0x9a,
	0x4f, 0x01, 0x28, 0xfb, 0xc8, 0xc2, 0xab, 0xac, 0x69, 0x3a, 0xa0, 0x89, 0x36, 0x4b, 0x64, 0x5f,
	0xdc, 0x19, 0x5d, 0xda, 0xf9, 0x2e, 0x6c, 0x54, 0x3b, 0xaf, 0x6e, 0x53, 0x97, 0xba, 0x1f, 0x89,
	0x77, 0x89, 0xfc, 0xdc, 0x97, 0x17, 0x69, 0x50, 0x59, 0x9b, 0x3d, 0x68, 0xac, 0x42, 0xbb, 0xe1,
	0xb5, 0x72, 0x9f, 0x7c, 0x45, 0x70, 0xf3, 0xc2, 0x2f, 0xc0, 0x0f, 0xc0, 0x38, 0x70, 0x5e, 0x79,
	0xd4, 0xfe, 0x70, 0x68, 0x3b, 0xae, 0xe7, 0xbe, 0xf3, 0x1c, 0x7b, 0xb0, 0xeb, 0xed, 0xf5, 0xdf,
	0xda, 0x4d, 0x05, 0xdf, 0x82, 0x2d, 0xe1, 0x76, 0x2d, 0xcb, 0x7e, 0xef, 0x56, 0x10, 0x9d, 0x43,
	0x6a, 0xbf, 0xb1, 0xad, 0x25, 0x5c, 0xc3, 0x18, 0x36, 0x05, 0x14, 0xca, 0xb3, 0x5e, 0x1f, 0x0e,
	0xf6, 0x9b, 0x35, 0x7c, 0x1b, 0xf0, 0x65, 0xe6, 0x75, 0xad, 0xfd, 0xa6, 0xda, 0x7b, 0x39, 0x9b,
	0x13, 0xe5, 0x74, 0x4e, 0x94, 0xb3, 0x39, 0x41, 0x7f, 0xe7, 0x04, 0x7d, 0x29, 0x09, 0xfa, 0x51,
	0x12, 0xf4, 0xb3, 0x24, 0xe8, 0x57, 0x49, 0xd0, 0xac, 0x24, 0xe8, 0x77, 0x49, 0xd0, 0x9f, 0x92,
	0x28, 0x67, 0x25, 0x41, 0xdf, 0x16, 0x44, 0x99, 0x2d, 0x88, 0x72, 0xba, 0x20, 0x4a, 0xb0, 0x2e,
	0xbf, 0xfa, 0x8b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xa5, 0x23, 0x38, 0x30, 0x03, 0x00,
	0x00,
}
